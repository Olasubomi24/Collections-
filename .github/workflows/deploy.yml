name: Deploy CodeIgniter to Ubuntu
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: [self-hosted, Linux, X64, macrotech-actions-runner]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify PHP 7.4
      run: |
        # Verify PHP 7.4 is installed and working
        php7.4 -v
      
    - name: Install Composer
      run: |
        # Check if Composer is installed
        if ! command -v composer &> /dev/null; then
          echo "Installing Composer..."
          curl -sS https://getcomposer.org/installer | php7.4
          # Install locally if sudo is not available
          mkdir -p ~/bin
          mv composer.phar ~/bin/composer
          chmod +x ~/bin/composer
          export PATH="$HOME/bin:$PATH"
        fi
        
        # Verify Composer installation
        which composer
        composer --version || ~/bin/composer --version
        
    - name: Fix composer.json case sensitivity
      run: |
        # Fix the case sensitivity issue with vfsStream/vfsstream
        if grep -q "mikey179/vfsStream" composer.json; then
          echo "Fixing case sensitivity in composer.json..."
          sed -i 's/"mikey179\/vfsStream"/"mikey179\/vfsstream"/g' composer.json
          cat composer.json
        fi
        
    - name: Install Dependencies
      run: |
        # Use PHP 7.4 with Composer explicitly
        COMPOSER=$(which composer || echo "$HOME/bin/composer")
        php7.4 $COMPOSER install --prefer-dist --no-progress --no-dev
        
    - name: Deploy Application
      run: |
        # Create deployment directory if it doesn't exist
        sudo mkdir -p /var/www/collection-frontend
        
        # Copy application files to deployment directory
        sudo rsync -avz --exclude='.git' --exclude='.github' --exclude='node_modules' --delete ./ /var/www/collection-frontend/
        
        # Navigate to deployment directory
        cd /var/www/collection-frontend
        
        # Set COMPOSER_ALLOW_SUPERUSER environment variable and install dependencies
        # Fix: Avoid using sudo -E and set variable directly in the sudo command
        COMPOSER=$(which composer || echo "$HOME/bin/composer")
        sudo COMPOSER_ALLOW_SUPERUSER=1 php7.4 $COMPOSER install --no-dev --optimize-autoloader
        
        # Create writable directories if they don't exist
        sudo mkdir -p /var/www/collection-frontend/application/cache
        sudo mkdir -p /var/www/collection-frontend/application/logs
        
        # Set permissions for writable directories
        sudo chmod -R 755 /var/www/collection-frontend/application/cache
        sudo chmod -R 755 /var/www/collection-frontend/application/logs
    
    - name: Automated Post-Deployment Steps
      run: |
        echo "Performing automated post-deployment steps..."
        
        # Set proper ownership for writable directories
        sudo chown -R www-data:www-data /var/www/collection-frontend/application/cache
        sudo chown -R www-data:www-data /var/www/collection-frontend/application/logs
        
        # Copy Nginx config ONLY if target file doesn't exist
        if [ -f "$(pwd)/nginx.conf" ] && [ ! -f "/etc/nginx/conf.d/collection-frontend.conf" ]; then
          echo "Nginx config not found, installing it..."
          sudo cp "$(pwd)/nginx.conf" /etc/nginx/conf.d/collection-frontend.conf
          echo "Nginx config installed."
        else
          if [ -f "/etc/nginx/conf.d/collection-frontend.conf" ]; then
            echo "Nginx config already exists, skipping..."
          else
            echo "No nginx.conf found in repository, skipping..."
          fi
        fi
        
        # Reload Nginx
        sudo systemctl reload nginx
        
        # Restart PHP-FPM
        sudo systemctl restart php7.4-fpm
        
        echo "Post-deployment steps completed successfully!"
        
    - name: Deployment Summary
      run: |
        echo "========== Deployment Complete =========="
        echo "Application deployed to: /var/www/collection-frontend"
        echo "Timestamp: $(date)"
        echo "Commit: $(git rev-parse HEAD)"
        echo "Branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "========================================"
